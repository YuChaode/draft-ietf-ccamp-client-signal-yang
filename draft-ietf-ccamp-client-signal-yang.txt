<?xml version="1.0" encoding="US-ASCII"?> 
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<!--  vi: set et smarttab sw=2 tabstop=4:--> 
<?rfc toc="yes"?> 
<?rfc tocompact="yes"?> 
<?rfc tocdepth="3"?> 
<?rfc tocindent="yes"?> 
<?rfc symrefs="yes"?> 
<?rfc sortrefs="yes"?> 
<?rfc comments="yes"?> 
<?rfc inline="yes"?> 
<?rfc compact="yes"?> 
<?rfc subcompact="no"?> 

<rfc category="std" docName="draft-ietf-ccamp-client-signal-yang-10" ipr="trust200902" obsoletes="" updates="" submissionType="IETF" xml:lang="en">
 <front>
  <title abbrev="Client Signals YANG Model"> A YANG Data Model for Transport Network Client Signals </title> 

  <author initials="H." surname="Zheng" fullname="Haomian Zheng">
   <organization>Huawei Technologies</organization>
   <address>
    <postal>
     <street>H1 XiliuBeipo Village, Songshan Lake </street>
     <city>Dongguan</city>
     <region>Guangdong</region>
     <code></code>
     <country>China</country>
    </postal>
    <email>zhenghaomian@huawei.com</email>
   </address>
  </author>

  <author initials="A." surname="Guo" fullname="Aihua Guo">
   <organization>Futurewei</organization>
   <address>
    <postal>
     <street></street>
     <city></city>
     <region></region>
     <code></code>
     <country></country>
    </postal>
    <email>aihuaguo.ietf@gmail.com</email>
   </address>
  </author>
  
    <author initials="I." surname="Busi" fullname="Italo Busi">
   <organization>Huawei Technologies</organization>
   <address>
    <postal>
     <street></street>
     <city></city>
     <region></region>
     <code></code>
     <country></country>
    </postal>
    <email>Italo.Busi@huawei.com</email>
   </address>
  </author>


  <author initials="A." surname="Snitser" fullname="Anton Snitser">
   <organization>Sedona</organization>
   <address>
    <postal>
     <street></street>
     <city></city>
     <region></region>
     <code></code>
     <country></country>
    </postal>
    <email>antons@sedonasys.com</email>
   </address>
  </author>

  <author initials="F." surname="Lazzeri" fullname="Francesco Lazzeri">
   <organization>Ericsson</organization>
   <address>
    <postal>
     <street></street>
     <city></city>
     <region></region>
     <code></code>
     <country></country>
    </postal>
    <email>francesco.lazzeri@ericsson.com</email>
   </address>
  </author> 
   <author initials="Y." surname="Xu" fullname="Yunbin Xu">
   <organization>CAICT</organization>
   <address>
    <postal>
     <street></street>
     <city></city>
     <region></region>
     <code></code>
     <country></country>
    </postal>
    <email>xuyunbin@caict.ac.cn</email>
   </address>
  </author> 

   <author initials="Y." surname="Zhao" fullname="Yang Zhao">
   <organization>China Mobile</organization>
   <address>
    <postal>
     <street></street>
     <city></city>
     <region></region>
     <code></code>
     <country></country>
    </postal>
    <email>zhaoyangyjy@chinamobile.com</email>
   </address>
  </author> 
  <author initials="X." surname="Liu" fullname="Xufeng Liu">
   <organization>Volta Networks</organization>
   <address>
    <postal>
     <street></street>
     <city></city>
     <region></region>
     <code></code>
     <country></country>
    </postal>
    <email>xufeng.liu.ietf@gmail.com</email>
   </address>
  </author>

  <author initials="G." surname="Fioccola" fullname="Giuseppe Fioccola">
   <organization>Huawei Technologies</organization>
   <address>
    <postal>
     <street></street>
     <city></city>
     <region></region>
     <code></code>
     <country></country>
    </postal>
    <email>giuseppe.fioccola@huawei.com</email>
   </address>
  </author>
  <author initials="C." surname="Yu" fullname="Chaode Yu">
   <organization>Huawei Technologies</organization>
   <address>
    <postal>
     <street></street>
     <city></city>
     <region></region>
     <code></code>
     <country></country>
    </postal>
    <email>yuchaode@huawei.com</email>
   </address>
  </author>

  <date  month="October" day="23" year="2023" />
  <workgroup>CCAMP Working Group</workgroup>

 <abstract>
  <t>
  A transport network is a server-layer network to provide connectivity services to its client. The topology and tunnel information in the transport layer has already been defined by generic Traffic-engineered models and technology-specific models (e.g., OTN, WSON). However, how the client signals are accessing to the network has not been described. These information is necessary to both client and provider.
  </t> 
  <t>
  This draft describes how the client signals are carried over transport network and defines YANG data models which are required during configuration procedure. More specifically, several client signal (of transport network) models including ETH, STM-n, FC and so on, are defined in this draft.  
  </t>
 </abstract>

 <!--
 <note title="Requirements Language">
  <t>
  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in 
  <xref target="RFC2119" pageno="false" format="default" />. 
  </t>
 </note>
 -->
 </front>


 <middle>
 <section title="Introduction" toc="default">
  <section title="Overview" toc="default">
  <t>
  A transport network is a server-layer network designed to provide connectivity services for a client-layer network to carry the client traffic transparently across the server-layer network resources. Currently the topology and tunnel models have been defined for transport networks, including <xref target="I-D.ietf-ccamp-otn-topo-yang" /> and <xref target="I-D.ietf-ccamp-otn-tunnel-model" />, providing server-layer topology abstraction and tunnel configuration between PEs. However, there is a missing piece for configuring how the PEs should map the client-layer traffic, received from the CE, over the server-layer tunnels: this gap is expected to be solved in this document. 
  </t>
  <t>
  This document defines a data model of all transport network client signals, using YANG language defined in <xref target="RFC7950" />.  The model can be used by applications exposing to a transport network controller via a RESTconf interface.  Furthermore, it can be used by an application for the following purposes (but not limited to):
  <list style="symbols">
   <t>
   To request/update an end-to-end service by driving a new tunnel to be set up to support this service; 
   </t>
   <t>
   To request/update an end-to-end service by using an existing tunnel; 
   </t>
   <t>
   To receive notification with regard to the information change of the given service;
   </t>
  </list>
  </t>
  <t>
   The YANG modules defined in this document conforms to the Network Management Datastore Architecture (NMDA) defined in <xref target="RFC8342" />.
   </t>
   </section>  <!--  Overview END  -->
   <section title="Prefixs in Model Names" toc="default">
   <t>
   In this document, names of data nodes and other data model objects are prefixed using the standard prefix associated with the corresponding YANG imported modules, including <xref target="RFC6991" />, <xref target="RFC8294" /> and <xref target="I-D.ietf-ccamp-otn-tunnel-model" />, which are shown as follow.
   </t>
  <figure>
    <artwork>
      <![CDATA[
  +-------------+---------------------------+----------------------+
  | Prefix      | YANG module               | Reference            |
  +-------------+---------------------------+----------------------+
  | yang        | ietf-yang-types           | [RFC6991]            |
  | te-types    | ietf-te-types             | [RFC8776]            |
  | rt-types    | ietf-routing-types        | [RFC8294]            |
  | l1-types    | ietf-layer1-types         |[ietf-ccamp-layer1-types]|
  | etht-types  | ietf-eth-tran-types       | This Document        |
  | clntsvc     | ietf-trans-client-service | This Document        |
  | ethtsvc     | ietf-eth-tran-service     | This Document        |
  |clntsvc-types|ietf-trans-client-svc-types| This Document        |
  +-------------+---------------------------+----------------------+
     ]]>
   </artwork>
  </figure>
   </section>  <!--  Module Relationship END  -->
 </section> 
 <!--  Introduction END  -->

 <section title="Terminology and Notations" toc="default">
  <t>
  A simplified graphical representation of the data model is used in this document. The meaning of the symbols in the YANG data tree presented later in this document is defined in <xref target="RFC8340" />. They are provided below for reference.
  </t>
  <t>
  <list style="symbols">
   <t>
   Brackets "[" and "]" enclose list keys.
   </t>
   <t>
   Abbreviations before data node names: "rw" means configuration (read-write) and "ro" state data (read-only).
   </t>
   <t>
   Symbols after data node names: "?" means an optional node, "!"  means a presence container, and "*" denotes a list and leaf-list.
   </t>
   <t>
   Parentheses enclose choice and case nodes, and case nodes are also marked with a colon (":").
   </t>
   <t>
   Ellipsis ("...") stands for contents of subtrees that are not shown.
   </t>
  </list>
  </t>
 </section>
 <!--  Terminology and Notation END  -->

 <section title="Transport Network Client Signal Overview" toc="default">
  <section anchor="svcconfig" title="Overview of Service Request and Network Configuration Scenarios " toc="default">
  
  <t>
  A global view of a multi-domain service can be described as the <xref target="godview" pageno="false" format="default" /> . The customer is usually responsible to configure the CE nodes and to request to the provider the service intent, from the CE nodes perspective, while the provider is responsible to configure the whole network (including the PE nodes) to support the customer service intent. Generally speaking, the network configurations required to support a customer service can be split into two different groups: CE-PE and PE-PE.  The CE-PE configuration deals with the client layer one-hop access link, while PE-PE configuration deals with the server layer tunnel. In <xref target="godview" pageno="false" format="default" /> we mark the intermediate nodes as 'P', which has same switching capability of PE but just not the 'end-point'. In this example, the link P-P and PE-P are a server-layer intra-domain or inter-domain link. 
  </t>
  <figure anchor="godview" title="Global view of Client Service with the Network Provider" suppress-title="false" align="left" alt="" width="" height="">
   <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
   <![CDATA[ 
      +----+                                            +----+
      | CE |                                            | CE |
      +--+-+                                            +--+-+
         |                                                 |
         | -------------                      -------------|
       //|/             \\\\             /////             |\\\\
     //  |                  \\         //                  |    \\
    | +--+-+    +---+  +---+  |       | +---+   +---+   +--+-+    |
   |  | PE +----+ P +--+ P +---+-----+--+ P +---+ P +---+ PE |     |
    | +----+    +---+  +---+  |       | +---+   +---+   +----+    |
     \\                     //         \\                       //
       \\\\             ////             \\\\\             /////
           -------------                      -------------
              Domain 1                         Domain 2
   ]]> 
   </artwork>
   </figure>
  <t>
  According to the responsibilities of each controller in <xref target="RFC8453" />, the controllers have different views of the service request and network configuration. The duty of CNC is to give the MDSC a description of the customer service intent: candidate YANG models include L1CSM <xref target="I-D.ietf-ccamp-l1csm-yang" />, L2SM <xref target="RFC8466" /> and L3SM <xref target="RFC8299" />, which are classified as customer service models, according to <xref target="RFC8309" />. These models provide necessary attributes to describe the customer service intent from the customer/CE perspective, and do not provide any specific network configuration. These models also implies that the customer service description can be considered in a separate manner rather than integratig with network configurations, which also enable the controllers to abstract/virtualize the network resource to make them visible to the customer and also easier to manage. In other words, the network knowledge is not necessary at CNC and CMI, which is seen in an abstracted form as shown in <xref target="CNCview" pageno="false" format="default" />.
  </t>
   <figure anchor="CNCview" title="CNC Viewpoint on the Client Service" suppress-title="false" align="left" alt="" width="" height="">
   <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
   <![CDATA[ 
                           /---------\
                        ///           \\\
  +----+               |                 |                 +----+
  | CE |--------------+      NETWORK      +----------------| CE |
  +----+               |                 |                 +----+
                        \\\           ///
                           \---------/
   ]]> 
   </artwork>
   </figure>
  <t>
  The functionalities of MDSC have been described in <xref target="RFC8453" />, which include the customer mapping/translation and multi-domain coordination. By receiving the request from CNC, MDSC need to understand what network configuration can support the customer service intent and turn to the corresponding PNCs for configuration.  The service request is therefore decomposed by MDSC into a few network configurations and forwarded to one or multiple PNCs respectively in single-domain and multi-domain scenario.  In general, the MDSC has the view of both PE and CE nodes and of some abstract information regarding the P nodes, as shown in <xref target="MDSCview" pageno="false" format="default" />. It is worth noting that this MDSC view is different with <xref target="godview" pageno="false" format="default" /> at the intra-domain link. Usually these details are hidden, for scalability purposes, and therefore the MDSC has only an abstract view of each domain internal topology. 
  </t>
    <figure anchor="MDSCview" title="MDSC view of both Client Service and Network Abstraction" suppress-title="false" align="left" alt="" width="" height="">
   <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
   <![CDATA[ 
                    ------                -----
                ////      \\\\        ///-     -\\\
              //              \\    //             \\
  +----+     | +----+     +---+ |  |+---+     +----+ |     +----+
  | CE |-----+-| PE |-----| P |-+--+| P |-----| PE |-+-----| CE |
  +----+     | +----+     +---+ |  |+---+     +----+ |     +----+
              \\              //    \\             //
                \\\\      ////        \\\-     -///
                    ------                -----
                   Domain 1             Domain 2
   ]]> 
   </artwork>
   </figure>
  <t>
  PNC is the controller that configure the physical devices, based on the network configuration received from the MDSC.  Each PNC has the detailed view of its own domain, the example of view from PNC in domain 1 is shown in
 <xref target="PNCview" pageno="false" format="default" />. The PNC has all the detailed topology information on PE and P nodes and on the intra-domain links.  The PNC configures the tunnel/tunnel segment within its domain based on the network configuration provided by the MDSC. The PNC also configures the network part of the CE-PE access links as well as the mapping of the client-layer traffic and the server-layer tunnels, based on the network configuration provided by the MDSC.  The interaction between PNC and MDSC for the client-layer network configuration is accomplished by the models defined in this draft.
  </t>
      <figure anchor="PNCview" title="PNC view on Network Configuration" suppress-title="false" align="left" alt="" width="" height="">
   <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
   <![CDATA[ 
         |                        |                        |
         | -------------          |           -------------|
       //|/             \\\\      |      /////             |\\\\
     //  |                  \\    |    //                  |    \\
    | +--+-+    +---+  +---+  |   |   | +---+   +---+   +--+-+    |
   |  | PE +----+ P +--+ P +---+--+--+--+ P +---+ P +---+ PE |     |
    | +----+    +---+  +---+  |   |   | +---+   +---+   +----+    |
     \\                     //    |    \\                       //
       \\\\             ////      |      \\\\\             /////
           -------------          |           -------------
       PNC View in Domain 1       |       PNC View in Domain 2
                                  |
   ]]> 
   </artwork>
   </figure>
  </section>
  <section anchor="Applicability" title="Applicability of Proposed Model" toc="default">
   <t>
   Existing TE and technology-specific models, such as topology models and tunnel models, support the network configuration among PEs and Ps. The customer service models, such as L1CSM, L2SM and L3SM, focus on describing the attributes among CEs. However, there is a missing piece on how to configure the CE-PE session. The models defined in this document provide the configuration on CE-PE when the provider server-layer network is TE-based technology. 
   </t>
   <t>
   In the example of OTN as the server-layer transport network, a full list of G-PID was summarized in <xref target="RFC7139" />, which can be divided into a few categories.  The G-PID signals can be categorized into transparent and non-transparent. Examples of transparent signals may include Ethernetphysical interfaces, FC, STM-n and so on. In this approach the OTN devices is not aware of the client signal type, and this information is only necessary among the controllers. Once the OTN tunnel is set up, there is no switching requested on the client layer, and therefore only signal mapping is needed, without a client tunnel set up. The models that supporting the configuration of transparent signals are defined in <xref target="OtherTree" pageno="false" format="default" />. The other category would be non-transparent, such as Carrier Ethernet and MPLS-TP, with a switching request on the client layer. Once the OTN tunnel is set up, a corresponding tunnel in the client layer has to be set up to carry services. The models that supporting the configuration of transparent signals are defined in <xref target="ETHTree" pageno="false" format="default" />. 
  </t>
  <t>
   It is also worth noting that some client signal can be carried over multiple types of networks. For example, the Ethernet services can be carried over either OTN or Ethernet TE tunnels (over optical or microwave networks). The model specified in this document allows the support from networks with different technologies. The list of identities for client signals are defined in <xref target="I-D.ietf-ccamp-layer1-types" />.
  </t>
<section anchor="idandread" title="Identifier and Readable Information" toc="default">
    <t>
     Name:
     The identifier of the client signal service can be configured or retrieved by the name information. The naming of this attribute is based on the requirements of unifying with TE tunnel models. It can be readable or unreadable. If it is readable, to make it unique, it is needed to specify a unified structure for all the PNC systems. It is hard to do that for the reason of a lot of customized requirements from different Operators. In the ICT technology, UUID format could be a good option.

     Title:
     The title of client signal service can be configured with its readable name. 

     Description:
     More detail information of client signal service, such as some administrative information or location information.

     User-label:
     An alias of client signal service which is used to tag based on the maintenance requirement.
    </t>
<figure><artwork type="ascii-art"><![CDATA[
module: ietf-trans-client-service
   +--rw client-svc
      +--rw client-svc-instances* [client-svc-name]
         +--rw client-svc-name           string
         +--rw client-svc-title?         string
         +--rw user-label?               string
         +--rw client-svc-descr?         string
         ...................................
]]></artwork></figure>
<figure><artwork type="ascii-art"><![CDATA[
module: ietf-eth-tran-service
   +--rw etht-svc-instances* [etht-svc-name]
         +--rw etht-svc-name             string
         +--rw etht-svc-title?           string
         +--rw user-label?               string
         +--rw etht-svc-descr?           string
         ...................................
]]></artwork></figure>    
    </section>
    <section anchor="resouceid" title="Unified Resource Identifiers" toc="default">
    <t>
     In [draft-ietf-teas-rfc8776-update], it is recognized that if the used topology resource adopts TE modeling, there could be two identifier systems, one is the network modeling system and the other one from TE topology modeling.

     The access ports of client signal service or end points of Ethernet service also adopt the TE topology resources. So two identifiers are both fine to specified in the configuration requests.
    </t>
<figure><artwork type="ascii-art"><![CDATA[
module: ietf-trans-client-service
   +--rw client-svc
      +--rw client-svc-instances* [client-svc-name]
         +--rw src-access-ports
         |  +--rw access-node-id?    te-types:te-node-id
         |  +--rw access-node-uri?   nw:node-id
         |  +--rw access-ltp-id?     te-types:te-tp-id
         |  +--rw access-ltp-uri?    nt:tp-id
         |  +--rw client-signal?     identityref
         +--rw dst-access-ports
            +--rw access-node-id?    te-types:te-node-id
            +--rw access-node-uri?   nw:node-id
            +--rw access-ltp-id?     te-types:te-tp-id
            +--rw access-ltp-uri?    nt:tp-id
            +--rw client-signal?     identityref
            ...................................
]]></artwork></figure>
<figure><artwork type="ascii-art"><![CDATA[
module: ietf-eth-tran-service
   +--rw etht-svc
      +--rw etht-svc-instances* [etht-svc-name]
         +--rw etht-svc-end-points* [etht-svc-end-point-name]
            +--rw etht-svc-access-points* [access-point-id]
               +--rw access-point-id    string
               +--rw access-node-id?    te-types:te-node-id
               +--rw access-node-uri?   nw:node-id
               +--rw access-ltp-id?     te-types:te-tp-id
               +--rw access-ltp-uri?    nt:tp-id
               +--rw access-role?       identityref
               ...................................
]]></artwork></figure>
    </section>
    <section anchor="threshold" title="Threshold Configuration" toc="default">
     <t>
      Some PM data are quite critical for client signal service users' experience, e.g. latency value. For the Operators, they can configure a service-oriented threshold for the PM data, to make the maintenance engineer recognize the network issues in time.
     </t>
<figure><artwork type="ascii-art"><![CDATA[
module: ietf-trans-client-service
   +--rw client-svc
      +--rw client-svc-instances* [client-svc-name]
         +--rw alarm-shreshold
            +--rw latency-threshold?   uint32
            ...................................
]]></artwork></figure>
<figure><artwork type="ascii-art"><![CDATA[
module: ietf-eth-tran-service
   +--rw etht-svc
      +--rw etht-svc-instances* [etht-svc-name]
         +--rw alarm-shreshold
            +--rw latency-threshold?   uint32
            ...................................
]]></artwork></figure>
    </section>    
  </section>
  
  <section anchor="State" title="State data of Services" toc="default">
   <section anchor="gerneric" title="Generic Requirements" toc="default">
   <t>
   States have been defined to retrieve the status of the delivered services. A few generic states defined in <xref target="RFC8776" /> are reused in this document. These states include the operational state and the provisioning state. 
   </t>
<figure><artwork type="ascii-art"><![CDATA[
module: ietf-trans-client-service
   +--rw client-svc
      +--rw client-svc-instances* [client-svc-name]
         +--ro operational-state?        identityref
         +--ro provisioning-state?       identityref
         ...................................
]]></artwork></figure>
<figure><artwork type="ascii-art"><![CDATA[
module: ietf-eth-tran-service
   +--rw etht-svc
      +--rw etht-svc-instances* [etht-svc-name]
         +--ro state    
            +--ro operational-state?    identityref
            +--ro provisioning-state?   identityref
            ...................................
]]></artwork></figure>    
   </section>    
   <section anchor="timestamp" title="Timestamp and Administrative information" toc="default">
   <t>
   A few other parameters are defined for the management of the services. Given the complicated labor division, the creation, update and maintainance may have different responsible systems. So the log of the service would be helpful and should be easy to retrived in a standard way as well. These information include, but not restricted to the following: 
  </t>
  <t>
  <list style="symbols">
   <t>
   When the service is created and has been last updated, these are specified in the creation-time and last-updated-time. 
   </t>
   <t>
   Who created the service and who made the last update to the service, these are specified in the created-by and last-updated-by. 
   </t>
   <t>
   The owner of the service is specifed as owned-by, which would be useful when the service is delegated by or to a specific system. The identifier of the system is used to represent such information. 
   </t>
  </list>
  </t>
<figure><artwork type="ascii-art"><![CDATA[
module: ietf-trans-client-service
   +--rw client-svc
      +--rw client-svc-instances* [client-svc-name]
         +--ro creation-time?            yang:date-and-time
         +--ro last-updated-time?        yang:date-and-time
         +--ro created-by?               string
         +--ro last-updated-by?          string
         +--ro owned-by?                 string
         ...................................
]]></artwork></figure>
<figure><artwork type="ascii-art"><![CDATA[
module: ietf-eth-tran-service
   +--rw etht-svc
      +--rw etht-svc-instances* [etht-svc-name]
         +--ro state   
            +--ro creation-time?        yang:date-and-time
            +--ro last-updated-time?    yang:date-and-time
            +--ro created-by?           string
            +--ro last-updated-by?      string
            +--ro owned-by?             string
            ...................................
]]></artwork></figure>    
   </section>
   <section anchor="pm" title="performance monitoring status" toc="default">
    <t>
    For the Operators, there are also some requirements to provide some PM data to the service users. Especially some PM data are quite critical for users' experience. 
    </t>
    <t>
    For example, one of the great advantage of client signal service is it can provide deterministic low latency. Some industry users, e.g. stock trading company, have great demand of stable short latency service to ensure their high-frequency fast trading operations can be finished quickly and definitely. In addition to provision a low-latency client signal service, Operators can also provide some other differentiated services for these kinds of service users. For example latency visibility can be provided to the users, to let them monitor the latency values. 
    </t>
    <t>
    The latency measurement mechanism can be referenced from sub-clause 7.10.1 of <xref target="ITU-T_G.875"/>. And PNC can provide a measurement latency after service is provisioned if the devices support this measurement mechanism. Otherwise providing an estimated value could be a workaround solution.
    </t>
<figure><artwork type="ascii-art"><![CDATA[
module: ietf-trans-client-service
   +--rw client-svc
      +--rw client-svc-instances* [client-svc-name]
         +--ro pm-state
            +--ro latency?   uint32
            ...................................
]]></artwork></figure>
<figure><artwork type="ascii-art"><![CDATA[
module: ietf-eth-tran-service
   +--rw etht-svc
      +--rw etht-svc-instances* [etht-svc-name]
         +--ro state   
            +--ro pm-state
               +--ro latency?   uint32
               ...................................
]]></artwork></figure>        
   </section>
   <section anchor="errormsg" title="Error Message Report" toc="default">
    <t>
     Once the processing of client signal service configuration, including creation, updating, deletion, meets with some internal problems, such as no enough available bandwidth, or wrong client signal mapping .etc., the problems should be reported to the client system to make the issues read by the maintenance engineers.

     Since these error messages are more technologies-specific, especially sometimes accurate location information is needed in these messages, it is hard to standardize these error messages by RESTCONF protocol errors. For the client systems, they would like to get these messages both from notifications and retrieval. So this document defines an error container in the YANG data model to let the PNC to provide these messages.
    </t>
<figure><artwork type="ascii-art"><![CDATA[
module: ietf-trans-client-service
   +--rw client-svc
      +--rw client-svc-instances* [client-svc-name]
         +--ro error-info
            +--ro error-code?          uint16
            +--ro error-description?   string
            +--ro error-timestamp?     yang:date-and-time
            ...................................
]]></artwork></figure>
<figure><artwork type="ascii-art"><![CDATA[
module: ietf-eth-tran-service
   +--rw etht-svc
      +--rw etht-svc-instances* [etht-svc-name]
         +--rw etht-svc-end-points* [etht-svc-end-point-name]
         +--ro state
            +--ro error-info
               +--ro error-code?          uint16
               +--ro error-description?   string
               +--ro error-timestamp?     yang:date-and-time
               ...................................
]]></artwork></figure>    
    </section> 
  </section>
 </section>
 <!--  OTN Client Signal Overview END  -->

 <section anchor="YANGTree" title="YANG Model for Transport Network Client Signal" toc="default">
  <section anchor="ETHTree" title="YANG Tree for Ethernet Service " toc="default">
   <t>
   <figure anchor="ETHtreefigure" title="" suppress-title="true" align="left" alt="" width="" height="">
    <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
<![CDATA[
module: ietf-eth-tran-service
   +--rw etht-svc
      +--rw globals
      |  +--rw named-bandwidth-profiles* [bandwidth-profile-name]
      |     +--rw bandwidth-profile-name    string
      |     +--rw bandwidth-profile-type?   etht-types:bandwidth-profile-type
      |     +--rw CIR?                      uint64
      |     +--rw CBS?                      uint64
      |     +--rw EIR?                      uint64
      |     +--rw EBS?                      uint64
      |     +--rw color-aware?              boolean
      |     +--rw coupling-flag?            boolean
      +--rw etht-svc-instances* [etht-svc-name]
         +--rw etht-svc-name             string
         +--rw etht-svc-title?           string
         +--rw user-label?               string
         +--rw etht-svc-descr?           string
         +--rw etht-svc-customer?        string
         +--rw etht-svc-type?            etht-types:service-type
         +--rw etht-svc-lifecycle?       etht-types:lifecycle-status
         +--rw te-topology-identifier
         |  +--rw provider-id?   te-types:te-global-id
         |  +--rw client-id?     te-types:te-global-id
         |  +--rw topology-id?   te-types:te-topology-id
         +--rw resilience
         |  +--rw protection
         |  |  +--rw protection-type?                identityref
         |  |  +--rw protection-reversion-disable?   boolean
         |  |  +--rw hold-off-time?                  uint32
         |  |  +--rw wait-to-revert?                 uint16
         |  |  +--rw aps-signal-id?                  uint8
         |  +--rw restoration
         |     +--rw restoration-type?                identityref
         |     +--rw restoration-scheme?              identityref
         |     +--rw restoration-reversion-disable?   boolean
         |     +--rw hold-off-time?                   uint32
         |     +--rw wait-to-restore?                 uint16
         |     +--rw wait-to-revert?                  uint16
         +--rw etht-svc-end-points* [etht-svc-end-point-name]
         |  +--rw etht-svc-end-point-name             string
         |  +--rw etht-svc-end-point-id?              string
         |  +--rw etht-svc-end-point-descr?           string
         |  +--rw topology-role?                      identityref
         |  +--rw resilience
         |  +--rw etht-svc-access-points* [access-point-id]
         |  |  +--rw access-point-id    string
         |  |  +--rw access-node-id?    te-types:te-node-id
         |  |  +--rw access-node-uri?   nw:node-id
         |  |  +--rw access-ltp-id?     te-types:te-tp-id
         |  |  +--rw access-ltp-uri?    nt:tp-id
         |  |  +--rw access-role?       identityref
         |  |  +--rw pm-config
         |  |  |  +--rw pm-enable?             boolean
         |  |  |  +--rw sending-rate-high?     uint64
         |  |  |  +--rw sending-rate-low?      uint64
         |  |  |  +--rw receiving-rate-high?   uint64
         |  |  |  +--rw receiving-rate-low?    uint64
         |  |  +--ro state
         |  |  |  +--ro operational-state?    identityref
         |  |  |  +--ro provisioning-state?   identityref
         |  |  +--ro performance?       identityref
         |  +--rw service-classification-type?        identityref
         |  +--rw (service-classification)?
         |  |  +--:(port-classification)
         |  |  +--:(vlan-classification)
         |  |     +--rw outer-tag!
         |  |     |  +--rw tag-type?     etht-types:eth-tag-classify
         |  |     |  +--rw (individual-bundling-vlan)?
         |  |     |     +--:(individual-vlan)
         |  |     |     |  +--rw vlan-value?   etht-types:vlanid
         |  |     |     +--:(vlan-bundling)
         |  |     |        +--rw vlan-range?   etht-types:vid-range-type
         |  |     +--rw second-tag!
         |  |        +--rw tag-type?     etht-types:eth-tag-classify
         |  |        +--rw (individual-bundling-vlan)?
         |  |           +--:(individual-vlan)
         |  |           |  +--rw vlan-value?   etht-types:vlanid
         |  |           +--:(vlan-bundling)
         |  |              +--rw vlan-range?   etht-types:vid-range-type
         |  +--rw split-horizon-group?                string
         |  +--rw (direction)?
         |  |  +--:(symmetrical)
         |  |  |  +--rw ingress-egress-bandwidth-profile
         |  |  |     +--rw (style)?
         |  |  |        +--:(named)
         |  |  |        |  +--rw bandwidth-profile-name?   leafref
         |  |  |        +--:(value)
         |  |  |           +--rw bandwidth-profile-type?   etht-types:bandwidth-profile-type
         |  |  |           +--rw CIR?                      uint64
         |  |  |           +--rw CBS?                      uint64
         |  |  |           +--rw EIR?                      uint64
         |  |  |           +--rw EBS?                      uint64
         |  |  |           +--rw color-aware?              boolean
         |  |  |           +--rw coupling-flag?            boolean
         |  |  +--:(asymmetrical)
         |  |     +--rw ingress-bandwidth-profile
         |  |     |  +--rw (style)?
         |  |     |     +--:(named)
         |  |     |     |  +--rw bandwidth-profile-name?   leafref
         |  |     |     +--:(value)
         |  |     |        +--rw bandwidth-profile-type?   etht-types:bandwidth-profile-type
         |  |     |        +--rw CIR?                      uint64
         |  |     |        +--rw CBS?                      uint64
         |  |     |        +--rw EIR?                      uint64
         |  |     |        +--rw EBS?                      uint64
         |  |     |        +--rw color-aware?              boolean
         |  |     |        +--rw coupling-flag?            boolean
         |  |     +--rw egress-bandwidth-profile
         |  |        +--rw (style)?
         |  |           +--:(named)
         |  |           |  +--rw bandwidth-profile-name?   leafref
         |  |           +--:(value)
         |  |              +--rw bandwidth-profile-type?   etht-types:bandwidth-profile-type
         |  |              +--rw CIR?                      uint64
         |  |              +--rw CBS?                      uint64
         |  |              +--rw EIR?                      uint64
         |  |              +--rw EBS?                      uint64
         |  |              +--rw color-aware?              boolean
         |  |              +--rw coupling-flag?            boolean
         |  +--rw vlan-operations
         |     +--rw (direction)?
         |        +--:(symmetrical)
         |        |  +--rw symmetrical-operation
         |        |     +--rw pop-tags?    uint8
         |        |     +--rw push-tags
         |        |        +--rw outer-tag!
         |        |        |  +--rw tag-type?      etht-types:eth-tag-type
         |        |        |  +--rw vlan-value?    etht-types:vlanid
         |        |        |  +--rw default-pcp?   uint8
         |        |        +--rw second-tag!
         |        |           +--rw tag-type?      etht-types:eth-tag-type
         |        |           +--rw vlan-value?    etht-types:vlanid
         |        |           +--rw default-pcp?   uint8
         |        +--:(asymmetrical)
         |           +--rw asymmetrical-operation
         |              +--rw ingress
         |              |  +--rw pop-tags?    uint8
         |              |  +--rw push-tags
         |              |     +--rw outer-tag!
         |              |     |  +--rw tag-type?      etht-types:eth-tag-type
         |              |     |  +--rw vlan-value?    etht-types:vlanid
         |              |     |  +--rw default-pcp?   uint8
         |              |     +--rw second-tag!
         |              |        +--rw tag-type?      etht-types:eth-tag-type
         |              |        +--rw vlan-value?    etht-types:vlanid
         |              |        +--rw default-pcp?   uint8
         |              +--rw egress
         |                 +--rw pop-tags?    uint8
         |                 +--rw push-tags
         |                    +--rw outer-tag!
         |                    |  +--rw tag-type?      etht-types:eth-tag-type
         |                    |  +--rw vlan-value?    etht-types:vlanid
         |                    |  +--rw default-pcp?   uint8
         |                    +--rw second-tag!
         |                       +--rw tag-type?      etht-types:eth-tag-type
         |                       +--rw vlan-value?    etht-types:vlanid
         |                       +--rw default-pcp?   uint8
         +--rw alarm-shreshold
         |  +--rw latency-threshold?   uint32
         +--rw underlay
         |  +--rw (technology)?
         |  |  +--:(native-ethernet)
         |  |  |  +--rw eth-tunnels* [name]
         |  |  |     +--rw name              leafref
         |  |  |     +--rw encoding?         identityref
         |  |  |     +--rw switching-type?   identityref
         |  |  +--:(frame-base)
         |  |  |  +--rw otn-tunnels* [name]
         |  |  |     +--rw name              leafref
         |  |  |     +--rw encoding?         identityref
         |  |  |     +--rw switching-type?   identityref
         |  |  +--:(mpls-tp)
         |  |     +--rw pw
         |  |        +--rw pw-id?                       string
         |  |        +--rw pw-name?                     string
         |  |        +--rw transmit-label?              rt-types:mpls-label
         |  |        +--rw receive-label?               rt-types:mpls-label
         |  |        +--rw encapsulation-type?          identityref
         |  |        +--ro oper-status?                 identityref
         |  |        +--rw ingress-bandwidth-profile
         |  |        |  +--rw (style)?
         |  |        |     +--:(named)
         |  |        |     |  +--rw bandwidth-profile-name?   leafref
         |  |        |     +--:(value)
         |  |        |        +--rw bandwidth-profile-type?   etht-types:bandwidth-profile-type
         |  |        |        +--rw CIR?                      uint64
         |  |        |        +--rw CBS?                      uint64
         |  |        |        +--rw EIR?                      uint64
         |  |        |        +--rw EBS?                      uint64
         |  |        +--rw pw-paths* [path-id]
         |  |           +--rw path-id       uint8
         |  |           +--rw tp-tunnels* [name]
         |  |              +--rw name    string
         |  +--rw src-split-horizon-group?   string
         |  +--rw dst-split-horizon-group?   string
         +--rw admin-status?             identityref
         +--ro state
            +--ro operational-state?    identityref
            +--ro provisioning-state?   identityref
            +--ro creation-time?        yang:date-and-time
            +--ro last-updated-time?    yang:date-and-time
            +--ro created-by?           string
            +--ro last-updated-by?      string
            +--ro owned-by?             string
            +--ro pm-state
            |  +--ro latency?   uint32
            +--ro error-info
               +--ro error-code?          uint16
               +--ro error-description?   string
               +--ro error-timestamp?     yang:date-and-time

]]> 
    </artwork>
   </figure>
   </t>
  </section>
  <!--  tree END  --> 

  <section anchor="OtherTree" title="YANG Tree for other Transport Network Client Signal Model" toc="default">
   <t>
    <figure anchor="Othertreefigure" title="" suppress-title="true" align="left" alt="" width="" height="">
    <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
   <![CDATA[
module: ietf-trans-client-service
   +--rw client-svc
      +--rw client-svc-instances* [client-svc-name]
         +--rw client-svc-name           string
         +--rw client-svc-title?         string
         +--rw user-label?               string
         +--rw client-svc-descr?         string
         +--rw client-svc-customer?      string
         +--rw resilience
         +--rw te-topology-identifier
         |  +--rw provider-id?   te-types:te-global-id
         |  +--rw client-id?     te-types:te-global-id
         |  +--rw topology-id?   te-types:te-topology-id
         +--rw admin-status?             identityref
         +--rw src-access-ports
         |  +--rw access-node-id?    te-types:te-node-id
         |  +--rw access-node-uri?   nw:node-id
         |  +--rw access-ltp-id?     te-types:te-tp-id
         |  +--rw access-ltp-uri?    nt:tp-id
         |  +--rw client-signal?     identityref
         +--rw dst-access-ports
         |  +--rw access-node-id?    te-types:te-node-id
         |  +--rw access-node-uri?   nw:node-id
         |  +--rw access-ltp-id?     te-types:te-tp-id
         |  +--rw access-ltp-uri?    nt:tp-id
         |  +--rw client-signal?     identityref
         +--ro pm-state
         |  +--ro latency?   uint32
         +--ro error-info
         |  +--ro error-code?          uint16
         |  +--ro error-description?   string
         |  +--ro error-timestamp?     yang:date-and-time
         +--rw alarm-shreshold
         |  +--rw latency-threshold?   uint32
         +--rw direction?                identityref
         +--rw svc-tunnels* [tunnel-name]
         |  +--rw tunnel-name    string
         +--ro operational-state?        identityref
         +--ro provisioning-state?       identityref
         +--ro creation-time?            yang:date-and-time
         +--ro last-updated-time?        yang:date-and-time
         +--ro created-by?               string
         +--ro last-updated-by?          string
         +--ro owned-by?                 string

]]> 
    </artwork>
   </figure>
   </t>
  </section>
  <!--  Othertree END  -->
  
</section>
 <!--  YANG TREE END  -->

 <section title="YANG Code for Transport Network Client Signal" toc="default">
  <section anchor="ETHservice" title="The ETH Service YANG Code" toc="default">
<t>
  This module imports typedefs and modules from <xref target="RFC6991" />, <xref target="RFC8294" />, <xref target="RFC8776" />.
</t>
  <figure anchor="ETHserviceYANGCode" title="" suppress-title="true" align="left" alt="" width="" height="">
    <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
 <![CDATA[ 
<CODE BEGINS> file "ietf-eth-tran-service@2023-10-23.yang"
module ietf-eth-tran-service {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-eth-tran-service";

  prefix "ethtsvc";
  import ietf-yang-types {
    prefix "yang";
    reference "RFC 6991 - Common YANG Data Types";
  }

  import ietf-network {
    prefix "nw";
    reference "RFC8345 - A YANG Data Model for Network Topologies";
  }
  
  import ietf-network-topology {
    prefix "nt";
    reference "RFC8345 - A YANG Data Model for Network Topologies";
  }
  
  import ietf-te-types {
    prefix "te-types";
    reference "RFC 8776 - Traffic Engineering Common YANG Types";
  }

  import ietf-eth-tran-types {
    prefix "etht-types";
    reference "RFC XXXX - A YANG Data Model for Transport
               Network Client Signals";
  }

  import ietf-routing-types {
    prefix "rt-types";
    reference "RFC 8294 - Common YANG Data Types for the
               Routing Area";

  }

  import ietf-te {
    prefix "te";
    reference "RFC YYYY - A YANG Data Model for Traffic
               Engineering Tunnels and Interfaces";
  }

  organization
    "Internet Engineering Task Force (IETF) CCAMP WG";
  contact
    "
      WG List: <mailto:ccamp@ietf.org>

      ID-draft editor:
        Haomian Zheng (zhenghaomian@huawei.com);
        Italo Busi (italo.busi@huawei.com);
        Aihua Guo (aihuaguo.ietf@gmail.com);
        Anton Snitser (antons@sedonasys.com);0
        Francesco Lazzeri (francesco.lazzeri@ericsson.com);
        Yunbin Xu (xuyunbin@caict.ac.cn);
        Yang Zhao (zhaoyangyjy@chinamobile.com);
        Xufeng Liu (xufeng.liu.ietf@gmail.com);
        Giuseppe Fioccola (giuseppe.fioccola@huawei.com);
        Chaode Yu (yuchaode@huawei.com)
    ";

  description
    "This module defines a YANG data model for describing
     the Ethernet services. The model fully conforms to the
     Network Management Datastore Architecture (NMDA).

     Copyright (c) 2021 IETF Trust and the persons
     identified as authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (https://trustee.ietf.org/license-info).
     This version of this YANG module is part of RFC XXXX; see
     the RFC itself for full legal notices.";

  revision 2023-10-23 {
    description
      "version -04 as an WG document";
    reference
      "draft-ietf-ccamp-client-signal-yang";
  }

  /*
   * Groupings
   */

  grouping vlan-classification {
    description
      "A grouping which represents classification
      on an 802.1Q VLAN tag.";

    leaf tag-type {
      type etht-types:eth-tag-classify;
      description
        "The tag type used for VLAN classification.";
    }
    choice individual-bundling-vlan {
      description
        "VLAN based classification can be individual
         or bundling.";

      case individual-vlan {
        leaf vlan-value {
          type etht-types:vlanid;
          description
            "VLAN ID value.";
        }
      }

      case vlan-bundling {
        leaf vlan-range {
          type etht-types:vid-range-type;
          description
            "List of VLAN ID values.";
        }
      }
    }
  }

  grouping vlan-write {
    description
      "A grouping which represents push/pop operations
       of an 802.1Q VLAN tag.";

    leaf tag-type {
      type etht-types:eth-tag-type;
      description
        "The VLAN tag type to push/swap.";
    }
    leaf vlan-value {
      type etht-types:vlanid;
      description
        "The VLAN ID value to push/swap.";
    }
/*
 * To be added: this attribute is used when:
 * a) the ETH service has only one CoS (as in current version)
 * b) as a default when a mapping between a given CoS value
 *    and the PCP value is not defined (in future versions)
 */
    leaf default-pcp {
      type uint8 {
        range "0..7";
      }
      description
        "The default Priority Code Point (PCP) value to push/swap";
    }
  }

  grouping vlan-operations {
    description
      "A grouping which represents VLAN operations.";

      leaf pop-tags {
      type uint8 {
        range "1..2";
      }
      description
        "The number of VLAN tags to pop (or swap if used in
         conjunction with push-tags)";
    }
    container push-tags {
      description
        "The VLAN tags to push (or swap if used in
         conjunction with pop-tags)";

      container outer-tag {
        presence
          "Indicates existence of the outermost VLAN tag to
           push/swap";

        description
          "The outermost VLAN tag to push/swap.";

        uses vlan-write;
      }
      container second-tag {
      must
        '../outer-tag/tag-type = "etht-types:s-vlan-tag-type" and ' +
        'tag-type = "etht-types:c-vlan-tag-type"'
        {

          error-message
            "
              When pushing/swapping two tags, the outermost tag must
              be specified and of S-VLAN type and the second
              outermost tag must be of C-VLAN tag type.
            ";
          description
            "
              For IEEE 802.1Q interoperability, when pushing/swapping
              two tags, it is required that the outermost tag exists
              and is an S-VLAN, and the second outermost tag is a
              C-VLAN.
            ";
        }

        presence
          "Indicates existence of a second outermost VLAN tag to
           push/swap";

        description
          "The second outermost VLAN tag to push/swap.";
        uses vlan-write;
      }
    }
  }

  grouping named-or-value-bandwidth-profile {
    description
      "A grouping to configure a bandwdith profile either by
       referencing a named bandwidth profile or by
       configuring the values of the bandwidth profile attributes.";
    choice style {
      description
        "Whether the bandwidth profile is named or defined by value";

      case named {
        description
          "Named bandwidth profile.";
        leaf bandwidth-profile-name {
          type leafref {
             path "/ethtsvc:etht-svc/ethtsvc:globals/"
             + "ethtsvc:named-bandwidth-profiles/"
             + "ethtsvc:bandwidth-profile-name";
             }
          description
            "Name of the bandwidth profile.";
        }
      }
      case value {
        description
          "Bandwidth profile configured by value.";
        uses etht-types:etht-bandwidth-profiles;
      }
    }
  }

  grouping bandwidth-profiles {
    description
      "A grouping which represent bandwidth profile configuration.";

    choice direction {
      description
        "Whether the bandwidth profiles are symmetrical or
         asymmetrical";
      case symmetrical {
        description
          "The same bandwidth profile is used to describe both
           the ingress and the egress bandwidth profile.";
        container ingress-egress-bandwidth-profile {
          description
            "The bandwdith profile used in both directions.";
          uses named-or-value-bandwidth-profile;
        }
      }
      case asymmetrical {
        description
          "Ingress and egress bandwidth profiles can be specified.";
        container ingress-bandwidth-profile {
          description
            "The bandwdith profile used in the ingress direction.";
          uses named-or-value-bandwidth-profile;
        }
        container egress-bandwidth-profile {
          description
            "The bandwdith profile used in the egress direction.";
          uses named-or-value-bandwidth-profile;
        }
      }
    }
  }

  grouping etht-svc-access-parameters {
    description
      "ETH services access parameters";

    leaf access-node-id {
      type te-types:te-node-id;
      description
        "The identifier of the access node in
         the ETH TE topology.";
    }
    
    leaf access-node-uri {
      type nw:node-id;
      description
        "The identifier of the access node in the network.";
    }
    
    leaf access-ltp-id {
      type te-types:te-tp-id;
      description
        "The TE link termination point identifier, used
         together with access-node-id to identify the
         access LTP.";
    }
    
    leaf access-ltp-uri {
      type nt:tp-id;
      description
        "The link termination point identifier in network topology, 
        used together with access-node-uri to identify the 
        access LTP.";
    }    
    
    leaf access-role {
      type identityref {
        base etht-types:access-role;
      }
      description
        "Indicate the role of access, e.g., working or protection. ";
    }

    container pm-config {
      uses pm-config-grouping;
      description
      "This grouping is used to set the threshold value for
      performance monitoring. ";
    }

    container state {
      config false;
      description
      "The state is used to monitor the status of service. ";
      leaf operational-state {
        type identityref {
          base te-types:tunnel-state-type;
        }
        description
        "Indicating the operational state of client signal. ";
      }
      leaf provisioning-state {
        type identityref {
          base te-types:lsp-state-type;
        }
        description
        "Indicating the provisional state of client signal,
        especially when there is a change, i.e., revise, create. ";
      }
    }

    leaf performance {
      type identityref {
        base etht-types:performance;
      }
      config false;
      description
        "Performance Monitoring for the service. ";
    }

  }

  grouping etht-svc-tunnel-parameters {
    description
      "ETH services tunnel parameters.";
    choice technology {
      description
        "Service multiplexing is optional and flexible.";

      case native-ethernet {
        /*
         placeholder to support proprietary multiplexing
         (for further discussion)
        */
        list eth-tunnels {
          key name;
          description
            "ETH Tunnel list in native Ethernet scenario.";
          uses tunnels-grouping;
        }
      }

      case frame-base {
        list otn-tunnels {
          key name;
          description
            "OTN Tunnel list in Frame-based scenario.";
          uses tunnels-grouping;
        }
      }

      case mpls-tp {
        container pw {
          description
            "Pseudowire information for Ethernet over MPLS-TP.";
          uses pw-segment-grouping;
        }
      }
    }

/*
 * Open issue: can we constraints it to be used only with mp services?
 */
    leaf src-split-horizon-group {
      type string;
      description
      "Identify a split horizon group at the Tunnel source TTP";
    }
    leaf dst-split-horizon-group {
      type string;
      description
      "Identify a split horizon group at the Tunnel destination TTP";
    }
  }

  grouping  etht-svc-pm-threshold-config {
    description
      "Configuraiton parameters for Ethernet service PM thresholds.";

    leaf sending-rate-high {
      type uint64;
      description
        "High threshold of packet sending rate in kbps.";
    }
    leaf sending-rate-low {
      type uint64;
      description
        "Low threshold of packet sending rate in kbps.";
    }
    leaf receiving-rate-high {
      type uint64;
      description
        "High threshold of packet receiving rate in kbps.";
    }
    leaf receiving-rate-low {
      type uint64;
      description
        "Low threshold of packet receiving rate in kbps.";
    }
  }

  grouping  etht-svc-pm-stats {
    description
      "Ethernet service PM statistics.";

    leaf sending-rate-too-high {
      type uint32;
      description
        "Counter that indicates the number of times the
        sending rate is above the high threshold";
    }
    leaf sending-rate-too-low {
      type uint32;
      description
        "Counter that indicates the number of times the
        sending rate is below the low threshold";
    }
    leaf receiving-rate-too-high {
      type uint32;
      description
        "Counter that indicates the number of times the
        receiving rate is above the high threshold";
    }
    leaf receiving-rate-too-low {
      type uint32;
      description
        "Counter that indicates the number of times the
        receiving rate is below the low threshold";
    }
  }

  grouping  etht-svc-instance-config {
    description
      "Configuraiton parameters for Ethernet services.";

    leaf etht-svc-name {
      type string;
      description
        "Name of the ETH service.";
    }

    leaf etht-svc-title {
      type string;
      description
        "The Identifier of the ETH service.";
    }
    
    leaf user-label {
      type string;
      description
        "Alias of the ETH service.";
    }    

    leaf etht-svc-descr {
      type string;
      description
        "Description of the ETH service.";
    }

    leaf etht-svc-customer {
      type string;
      description
        "Customer of the ETH service.";
    }

     leaf etht-svc-type {
      type etht-types:service-type;
      description
        "Type of ETH service (p2p, mp2mp or rmp).";
      /* Add default as p2p */
    }

     leaf etht-svc-lifecycle {
      type etht-types:lifecycle-status;
      description
        "Lifecycle state of ETH service.";
      /* Add default as installed  */
    }
    uses te-types:te-topology-identifier;

    uses resilience-grouping;
    list etht-svc-end-points {
      key etht-svc-end-point-name;
      description
        "The logical end point for the ETH service. ";
      uses etht-svc-end-point-grouping;
    }
    
        
    container alarm-shreshold {
      description "threshold configuration for the E2E client signal";
      uses alarm-shreshold-grouping;
    }

    container underlay {
      description
        "The unterlay tunnel information that carrying the
        ETH service. ";
      uses etht-svc-tunnel-parameters;
    }

    leaf admin-status {
      type identityref {
        base te-types:tunnel-admin-state-type;
      }
      default te-types:tunnel-admin-state-up;
      description "ETH service administrative state.";
    }
  }

  grouping  etht-svc-instance-state {
    description
      "State parameters for Ethernet services.";

    leaf operational-state {
    type identityref {
        base te-types:tunnel-state-type;
      }
      default te-types:tunnel-state-up;
    description "ETH service operational state.";
    }
    leaf provisioning-state {
      type identityref {
        base te-types:lsp-state-type;
      }
      description "ETH service provisioning state.";
    }
    leaf creation-time {
      type yang:date-and-time;
      description
        "Time of ETH service creation.";
    }
    leaf last-updated-time {
      type yang:date-and-time;
      description
        "Time of ETH service last update.";
    }

    leaf created-by {
       type string;
       description
         "The client signal is created by whom,
          can be a system or staff ID.";
     }
     leaf last-updated-by {
       type string;
       description
         "The client signal is last updated by whom,
          can be a system or staff ID.";
     }
     leaf owned-by {
       type string;
       description
         "The client signal is last updated by whom,
          can be a system ID.";
     }
     container pm-state {
       description 
         "PM data of E2E Ethernet service";
       uses pm-state-grouping;
     }
     container error-info {
       description "error messages of configuration";
       uses error-info-grouping;
     }
  }
  
  grouping pm-state-grouping {
    leaf latency {
      description 
        "latency value of the E2E Ethernet service";
      type uint32;
      units microsecond;
    }
  }
  
  grouping error-info-grouping {
    leaf error-code {
      description "error code";
      type uint16;
    }
    
    leaf error-description {
      description "detail message of error";
      type string;
    }
    
    leaf error-timestamp {
      description "the date and time error is happened";
      type yang:date-and-time;
    }
  }
  
  grouping alarm-shreshold-grouping {
    leaf latency-threshold {
      description "a threshold for the E2E client signal service's
      latency. Once the latency value exceed this threshold, an alarm
      should be triggered.";
      type uint32;
      units microsecond;
    }
  }  

  /*
   * Data nodes
   */

  container etht-svc {
    description
      "ETH services.";

    container globals {
      description
        "Globals Ethernet configuration data container";
      list named-bandwidth-profiles {
        key bandwidth-profile-name;
        description
          "List of named bandwidth profiles used by
           Ethernet services.";

        leaf bandwidth-profile-name {
          type string;
          description
            "Name of the bandwidth profile.";
        }
        uses etht-types:etht-bandwidth-profiles;
      }
    }

    list etht-svc-instances {
      key etht-svc-name;
      description
        "The list of p2p ETH service instances";

      uses etht-svc-instance-config;

      container state {
        config false;
        description
          "Ethernet Service states.";

        uses etht-svc-instance-state;
      }
    }
  }

  grouping resilience-grouping {
    description
      "Grouping for resilience configuration. ";
    container resilience {
    description
      "To configure the data plane protection parameters,
      currently a placeholder only, future candidate attributes
      include, Revert, WTR, Hold-off Timer, ...";
      uses te:protection-restoration-properties;
    }
  }

  grouping etht-svc-end-point-grouping {
    description
      "Grouping for the end point configuration.";
    leaf etht-svc-end-point-name {
      type string;
      description
      "The name of the logical end point of ETH service. ";
    }

    leaf etht-svc-end-point-id {
      type string;
      description
      "The identifier of the logical end point of ETH service.";
    }

    leaf etht-svc-end-point-descr {
      type string;
      description
      "The description of the logical end point of ETH service. ";
    }

    leaf topology-role {
      type identityref {
        base etht-types:topology-role;
      }
      description
      "Indicating the underlay topology role,
      e.g., hub,spoke, any-to-any ";
    }

    container resilience {
      description
      "Placeholder for resilience configuration, for future study. ";
    }

    list etht-svc-access-points {
      key access-point-id;
      min-elements "1";
/*
  Open Issue:
    Is it possible to limit the max-elements only for p2p services?
      max-elements "2";
*/
      description
        "List of the ETH trasport services access point instances.";

      leaf access-point-id {
        type string;
        description
          "ID of the service access point instance";
      }
      uses etht-svc-access-parameters;
    }

    leaf service-classification-type {
      type identityref {
        base etht-types:service-classification-type;
      }
      description
        "Service classification type.";
    }

    choice service-classification {
      description
        "Access classification can be port-based or
         VLAN based.";

      case port-classification {
        /* no additional information */
      }

      case vlan-classification {
        container outer-tag {
          presence "The outermost VLAN tag exists";
          description
            "Classifies traffic using the outermost VLAN tag.";

          uses vlan-classification;
        }
        container second-tag {
          must
            '../outer-tag/tag-type = "etht-types:classify-s-vlan" and ' +
            'tag-type = "etht-types:classify-c-vlan"'
          {
            error-message
              "
                When matching two tags, the outermost tag must be
                specified and of S-VLAN type and the second
                outermost tag must be of C-VLAN tag type.
              ";
            description
              "
                For IEEE 802.1Q interoperability, when matching two
                tags, it is required that the outermost tag exists
                and is an S-VLAN, and the second outermost tag is a
                C-VLAN.
              ";
          }
          presence "The second outermost VLAN tag exists";

          description
            "Classifies traffic using the second outermost VLAN tag.";

          uses vlan-classification;
        }
      }
    }

/*
 * Open issue: can we constraints it to be used only with mp services?
 */
    leaf split-horizon-group {
      type string;
      description "Identify a split horizon group";
    }

    uses bandwidth-profiles;

    container vlan-operations {
      description
        "Configuration of VLAN operations.";
      choice direction {
        description
          "Whether the VLAN operations are symmetrical or
           asymmetrical";
        case symmetrical {
          container symmetrical-operation {
            uses vlan-operations;
            description
              "Symmetrical operations.
               Expressed in the ingress direction, but
               the reverse operation is applied to egress traffic";
          }
        }
        case asymmetrical {
          container asymmetrical-operation {
            description "Asymmetrical operations";
            container ingress {
              uses vlan-operations;
              description "Ingress operations";
            }
            container egress {
              uses vlan-operations;
              description "Egress operations";
            }
          }
        }
      }
    }
  }

  grouping pm-config-grouping {
    description
      "Grouping used for Performance Monitoring Configuration. ";
    leaf pm-enable {
      type boolean;
      description
      "Whether to enable the performance monitoring.";
    }

    leaf sending-rate-high {
      type uint64;
      description
      "The upperbound of sending rate.";
    }

    leaf sending-rate-low {
      type uint64;
      description
      "The lowerbound of sending rate.";
    }

    leaf receiving-rate-high {
      type uint64;
      description
      "The upperbound of receiving rate.";
    }

    leaf receiving-rate-low {
      type uint64;
      description
      "The lowerbound of receiving rate.";
    }
  }

  grouping pw-segment-grouping {
    description
      "Grouping used for PW configuration. ";
    leaf pw-id {
      type string;
      description
      "The Identifier information of pseudowire. ";
    }

    leaf pw-name {
      type string;
      description
      "The name information of pseudowire.";
    }

    leaf transmit-label {
      type rt-types:mpls-label;
      description
      "Transmit label information in PW. ";
    }

    leaf receive-label {
      type rt-types:mpls-label;
      description
      "Receive label information in PW. ";
    }

    leaf encapsulation-type {
      type identityref {
        base etht-types:encapsulation-type;
      }
      description
        "The encapsulation type, raw or tag. ";
    }

    leaf oper-status {
      type identityref {
        base te-types:tunnel-state-type;
      }
      config false;
      description
        "The operational state of the PW segment. ";
    }

    container ingress-bandwidth-profile {
      description
        "Bandwidth Profile for ingress. ";
      uses pw-segment-named-or-value-bandwidth-profile;
    }

    list pw-paths {
      key path-id;
      description
        "A list of pw paths. ";

      leaf path-id {
        type uint8;
        description
          "The identifier of pw paths. ";

      }

      list tp-tunnels {
        key name;
        description
          "Names of TP Tunnel underlay";
        leaf name {
          type string;
          description
            "Names of TP Tunnel underlay";
          }
      }
    }

  }

  grouping pw-segment-named-or-value-bandwidth-profile {
    description
      "A grouping to configure a bandwdith profile either by
       referencing a named bandwidth profile or by
       configuring the values of the bandwidth profile attributes.";
    choice style {
      description
        "Whether the bandwidth profile is named or defined by value";
      case named {
        description
          "Named bandwidth profile.";
        leaf bandwidth-profile-name {
          type leafref {
            path "/ethtsvc:etht-svc/ethtsvc:globals/"
            + "ethtsvc:named-bandwidth-profiles/"
            + "ethtsvc:bandwidth-profile-name";
          }
          description
            "Name of the bandwidth profile.";
        }
      }
      case value {
        description
          "Bandwidth profile configured by value.";
        uses etht-types:pw-segement-bandwidth-profile-grouping;
      }
    }
  }

  grouping tunnels-grouping {
    description
      "A group of tunnels. ";
    leaf name {
      type leafref {
        path "/te:te/te:tunnels/te:tunnel/te:name";
        require-instance false;
      }
      description "Dependency tunnel name";
    }
    leaf encoding {
      type identityref {
        base te-types:lsp-encoding-types;
      }
      description "LSP encoding type";
      reference "RFC3945";
    }
    leaf switching-type {
      type identityref {
        base te-types:switching-capabilities;
      }
      description "LSP switching type";
      reference "RFC3945";
    }
  }
}
<CODE ENDS>
]]> 
    </artwork>
   </figure>  
  </section>
  <!--  ETH YANG CODE END  -->


  <section anchor="ETHtype" title="YANG Code for ETH type" toc="default">
    <t>
   This module references a few documents including <xref target="RFC2697" />, <xref target="RFC2698" />, <xref target="RFC4115" />, <xref target="IEEE802.1ad" />, <xref target="IEEE802.1q" /> and <xref target="MEF10" />.
  </t>
   <figure anchor="ETHtypeYANGCode" title="" suppress-title="true" align="left" alt="" width="" height="">
    <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
 <![CDATA[ 
<CODE BEGINS> file "ietf-eth-tran-types@2023-10-23.yang"
module ietf-eth-tran-types {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-eth-tran-types";

  prefix "etht-types";

  organization
    "Internet Engineering Task Force (IETF) CCAMP WG";
  contact
    "
      WG List: <mailto:ccamp@ietf.org>

      ID-draft editor:
        Haomian Zheng (zhenghaomian@huawei.com);
        Italo Busi (italo.busi@huawei.com);
        Aihua Guo (aihuaguo.ietf@gmail.com);
        Anton Snitser (antons@sedonasys.com);
        Francesco Lazzeri (francesco.lazzeri@ericsson.com);
        Yunbin Xu (xuyunbin@caict.ac.cn);
        Yang Zhao (zhaoyangyjy@chinamobile.com);
        Xufeng Liu (xufeng.liu.ietf@gmail.com);
        Giuseppe Fioccola (giuseppe.fioccola@huawei.com);
        Chaode Yu (yuchaode@huawei.com)
    ";

  description
    "This module defines the ETH types.
     The model fully conforms to the Network Management
     Datastore Architecture (NMDA).

     Copyright (c) 2019 IETF Trust and the persons
     identified as authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (https://trustee.ietf.org/license-info).
     This version of this YANG module is part of RFC XXXX; see
     the RFC itself for full legal notices.";

  revision 2023-10-23 {
    description
      "version -05 as a WG draft";
    reference
      "draft-ietf-ccamp-client-signal-yang";
  }

  /*
   * Identities
   */

  identity eth-vlan-tag-type {
    description
      "ETH VLAN tag type.";
  }

  identity c-vlan-tag-type {
    base eth-vlan-tag-type;
    description
      "802.1Q Customer VLAN";
  }

  identity s-vlan-tag-type {
    base eth-vlan-tag-type;
    description
      "802.1Q Service VLAN (QinQ)";
  }

  identity service-classification-type {
    description
      "Service classification.";
  }

  identity port-classification {
    base service-classification-type;
    description
      "Port classification.";
  }

  identity vlan-classification {
    base service-classification-type;
    description
      "VLAN classification.";
  }

  identity eth-vlan-tag-classify {
    description
      "VLAN tag classification.";
  }

  identity classify-c-vlan {
    base eth-vlan-tag-classify;
    description
      "Classify 802.1Q Customer VLAN tag.
       Only C-tag type is accepted";
  }

  identity classify-s-vlan {
    base eth-vlan-tag-classify;
    description
      "Classify 802.1Q Service VLAN (QinQ) tag.
       Only S-tag type is accepted";
  }

  identity classify-s-or-c-vlan {
    base eth-vlan-tag-classify;
    description
      "Classify S-VLAN or C-VLAN tag-classify.
       Either tag is accepted";
  }

  identity bandwidth-profile-type {
    description
      "Bandwidth Profile Types";
  }

  identity mef-10-bwp {
    base bandwidth-profile-type;
    description
      "MEF 10 Bandwidth Profile";
  }

  identity rfc-2697-bwp {
    base bandwidth-profile-type;
    description
      "RFC 2697 Bandwidth Profile";
  }

  identity rfc-2698-bwp {
    base bandwidth-profile-type;
    description
      "RFC 2698 Bandwidth Profile";
  }

  identity rfc-4115-bwp {
    base bandwidth-profile-type;
    description
      "RFC 4115 Bandwidth Profile";
  }

  identity service-type {
    description
      "Type of Ethernet service.";
  }

  identity p2p-svc {
    base service-type;
    description
      "Ethernet point-to-point service (EPL, EVPL).";
  }

  identity rmp-svc {
    base service-type;
    description
      "Ethernet rooted-multitpoint service (E-TREE, EP-TREE).";
  }

  identity mp2mp-svc {
    base service-type;
    description
      "Ethernet multipoint-to-multitpoint service (E-LAN, EP-LAN).";
  }

  identity lifecycle-status {
    description
      "Lifecycle Status.";
  }

  identity installed {
    base lifecycle-status;
    description
      "Installed.";
  }

  identity planned {
    base lifecycle-status;
    description
      "Planned.";
  }

  identity pending-removal {
    base lifecycle-status;
    description
      "Pending Removal.";
  }

  /*
   * Type Definitions
   */

  typedef eth-tag-type {
    type identityref {
      base eth-vlan-tag-type;
    }
    description
      "Identifies a specific ETH VLAN tag type.";
  }

  typedef eth-tag-classify {
    type identityref {
      base eth-vlan-tag-classify;
    }
    description
      "Identifies a specific VLAN tag classification.";
  }

  typedef vlanid {
    type uint16 {
      range "1..4094";
    }
    description
      "The 12-bit VLAN-ID used in the VLAN Tag header.";
  }

  typedef vid-range-type {
    type string {
      pattern "([1-9][0-9]{0,3}(-[1-9][0-9]{0,3})?" +
              "(,[1-9][0-9]{0,3}(-[1-9][0-9]{0,3})?)*)";
    }
    description
      "A list of VLAN Ids, or non overlapping VLAN ranges, in
       ascending order, between 1 and 4094.
       This type is used to match an ordered list of VLAN Ids, or
       contiguous ranges of VLAN Ids. Valid VLAN Ids must be in the
       range 1 to 4094, and included in the list in non overlapping
       ascending order.

       For example: 1,10-100,50,500-1000";
  }

  typedef bandwidth-profile-type {
    type identityref {
      base bandwidth-profile-type;
    }
    description
      "Identifies a specific Bandwidth Profile type.";
  }

  typedef service-type {
    type identityref {
      base service-type;
    }
    description
      "Identifies the type of Ethernet service.";
  }

  typedef lifecycle-status {
    type identityref {
      base lifecycle-status;
    }
    description
      "Identifies the lLifecycle Status .";
  }

  /*
   * Grouping Definitions
   */

  grouping etht-bandwidth-profiles {
    description
      "Bandwidth profile configuration paramters.";

    leaf bandwidth-profile-type {
      type etht-types:bandwidth-profile-type;
      description
        "The type of bandwidth profile.";
    }
    leaf CIR {
      type uint64;
      description
        "Committed Information Rate in Kbps";
    }
    leaf CBS {
      type uint64;
      description
        "Committed Burst Size in in KBytes";
    }
    leaf EIR {
      type uint64;
      /* Need to indicate that EIR is not supported by RFC 2697

      must
        '../bw-profile-type = "mef-10-bwp" or ' +
        '../bw-profile-type = "rfc-2698-bwp" or ' +
        '../bw-profile-type = "rfc-4115-bwp"'

      must
        '../bw-profile-type != "rfc-2697-bwp"'
      */
      description
        "Excess Information Rate in Kbps
         In case of RFC 2698, PIR = CIR + EIR";
    }
    leaf EBS {
      type uint64;
      description
        "Excess Burst Size in KBytes.
          In case of RFC 2698, PBS = CBS + EBS";
    }
    leaf color-aware {
      type boolean;
      description
        "Indicates weather the color-mode is
        color-aware or color-blind.";
    }
    leaf coupling-flag {
      type boolean;
      /* Need to indicate that Coupling Flag is defined only for MEF 10

      must
        '../bw-profile-type = "mef-10-bwp"'
      */
      description
        "Coupling Flag.";
    }
  }

  identity topology-role {
    description
      "The role of underlay topology: e.g., hub, spoke,
      any-to-any.";
  }

  identity resilience {
    description
    "Placeholder for resilience information in data plane,
    for future study. ";
  }

  identity access-role {
    description
    "Indicating whether the access is a working or protection access.";
  }

  identity root-primary {
    base access-role;
    description
      "Designates the primary root UNI of an E-Tree service, and may also
           designates the UNI access role of E-LINE and E-LAN service.";
  }

  identity root-backup {
    base access-role;
    description
      "Designates the backup root UNI of an E-Tree service.";
  }

  identity leaf-access {
    base access-role;
    description
      "Designates the leaf UNI of an E-Tree service.";
  }
  
  identity leaf-edge {
    base access-role;
    description "";
  }

  identity performance {
    description
    "Placeholder for performance information, for future study.";
  }

  identity encapsulation-type {
    description
    "Indicating how the service is encapsulated (to PW), e.g, raw or tag. ";
  }
  grouping pw-segement-bandwidth-profile-grouping {
    description
      "bandwidth profile grouping for PW segment. ";
    leaf bandwidth-profile-type {
      type etht-types:bandwidth-profile-type;
      description
        "The type of bandwidth profile.";
    }
    leaf CIR {
      type uint64;
      description
        "Committed Information Rate in Kbps";
    }
    leaf CBS {
      type uint64;
      description
        "Committed Burst Size in in KBytes";
    }
    leaf EIR {
      type uint64;
      /* Need to indicate that EIR is not supported by RFC 2697

      must
        '../bw-profile-type = "mef-10-bwp" or ' +
        '../bw-profile-type = "rfc-2698-bwp" or ' +
        '../bw-profile-type = "rfc-4115-bwp"'

      must
        '../bw-profile-type != "rfc-2697-bwp"'
      */
      description
        "Excess Information Rate in Kbps
         In case of RFC 2698, PIR = CIR + EIR";
    }
    leaf EBS {
      type uint64;
      description
        "Excess Burst Size in KBytes.
          In case of RFC 2698, PBS = CBS + EBS";
    }
  }
      grouping eth-bandwidth {
      description
        "Available bandwith for ethernet.";
      leaf eth-bandwidth {
        type uint64{
          range "0..10000000000";
        }
        units "Kbps";
        description
          "Available bandwith value expressed in kilobits per second";
      }
    }

    grouping eth-label-restriction {
      description
        "Label Restriction for ethernet.";
      leaf tag-type {
        type etht-types:eth-tag-type;
        description "VLAN tag type.";
      }
      leaf priority {
        type uint8;
        description "priority.";
      }
    }
    grouping eth-label {
      description
        "Label for ethernet.";
      leaf vlanid {
        type etht-types:vlanid;
          description
            "VLAN tag id.";
      }
    }

    grouping eth-label-step {
      description "Label step for Ethernet VLAN";
      leaf eth-step {
        type uint16 {
          range "1..4095";
      }
      default 1;
      description
        "Label step which represent possible increments for
         an Ethernet VLAN tag.";
      reference
        "IEEE 802.1ad: Provider Bridges.";
    }
  }
}

<CODE ENDS>
]]> 
    </artwork>
   </figure>  
  </section>
  <!--  ETH Type YANG CODE END  -->

 <section anchor="OtherCode" title="Other Client Signal YANG Code" toc="default">
   <t>
   This module imports typedefs and modules from <xref target="RFC6991" />, <xref target="I-D.ietf-ccamp-otn-tunnel-model" />, <xref target="RFC8776" />.
  </t>
 <figure anchor="OtherClientYANGCode" title="" suppress-title="true" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
 <![CDATA[ 
<CODE BEGINS> file "ietf-trans-client-service@2023-10-23.yang"
module ietf-trans-client-service {
  /* TODO: FIXME */
    yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-trans-client-service";
  prefix "clntsvc";

  import ietf-network {
    prefix "nw";
    reference "RFC8345 - A YANG Data Model for Network Topologies";
  }
  
  import ietf-network-topology {
    prefix "nt";
    reference "RFC8345 - A YANG Data Model for Network Topologies";
  }
  
  import ietf-te-types {
    prefix "te-types";
    reference "RFC 8776 - Traffic Engineering Common YANG Types";
  }

  import ietf-layer1-types {
    prefix "layer1-types";
    reference "RFC ZZZZ - A YANG Data Model for Layer 1 Types";
  }

  import ietf-yang-types {
    prefix "yang";
    reference "RFC 6991 - Common YANG Data Types";
  }

 import ietf-trans-client-svc-types {
   prefix "clntsvc-types";
   reference "RFC XXXX - A YANG Data Model for
              Transport Network Client Signals";
 }

  organization
    "Internet Engineering Task Force (IETF) CCAMP WG";
  contact
    "
      ID-draft editor:
        Haomian Zheng (zhenghaomian@huawei.com);
        Aihua Guo (aihuaguo.ietf@gmail.com);
        Italo Busi (italo.busi@huawei.com);
        Anton Snitser (antons@sedonasys.com);
        Francesco Lazzeri (francesco.lazzeri@ericsson.com);
        Yunbin Xu (xuyunbin@caict.ac.cn);
        Yang Zhao (zhaoyangyjy@chinamobile.com);
        Xufeng Liu (Xufeng_Liu@jabil.com);
        Giuseppe Fioccola (giuseppe.fioccola@huawei.com);
        Chaode Yu (yuchaode@huawei.com);
    ";

  description
    "This module defines a YANG data model for describing
     transport network client services. The model fully conforms
     to the Network Management Datastore Architecture (NMDA).

     Copyright (c) 2021 IETF Trust and the persons
     identified as authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (https://trustee.ietf.org/license-info).
     This version of this YANG module is part of RFC XXXX; see
     the RFC itself for full legal notices.";
  revision 2023-10-23 {
    description
      "version -04 as a WG document";
    reference
      "draft-ietf-ccamp-client-signal-yang";
  }

  /*
   * Groupings
   */
  grouping client-svc-access-parameters {
    description
      "Transport network client signals access parameters";

    leaf access-node-id {
      type te-types:te-node-id;
      description
        "The identifier of the access node in the TE topology.";
    }
    
    leaf access-node-uri {
      type nw:node-id;
      description
        "The identifier of the access node in the network.";
    }

    leaf access-ltp-id {
      type te-types:te-tp-id;
      description
        "The TE link termination point identifier in TE topology, used
        together with access-node-id to identify the access LTP.";
    }

    leaf access-ltp-uri {
      type nt:tp-id;
      description
        "The link termination point identifier in network topology,
        used together with access-node-uri to identify the access LTP";
    }    

    leaf client-signal {
      type identityref {
        base layer1-types:client-signal;
      }
      description
        "Identify the client signal type associated with this port";
    }

  }
  
  grouping pm-state-grouping {
    leaf latency {
      description "latency value of the E2E client signal service";
      type uint32;
      units microsecond;
    }
  }
  
  grouping error-info-grouping {
    leaf error-code {
      description "error code";
      type uint16;
    }
    
    leaf error-description {
      description "detail message of error";
      type string;
    }
    
    leaf error-timestamp {
      description "the date and time error is happened";
      type yang:date-and-time;
    }
  }
  
  grouping alarm-shreshold-grouping {
    leaf latency-threshold {
      description "a threshold for the E2E client signal service's
      latency. Once the latency value exceed this threshold, an alarm
      should be triggered.";
      type uint32;
      units microsecond;
    }
  }

  grouping client-svc-tunnel-parameters {
    description
      "Transport network client signals tunnel parameters";

    leaf tunnel-name {
      type string;
      description
        "TE tunnel instance name.";
    }
  }

  grouping  client-svc-instance-config {
    description
      "Configuration parameters for client services.";
    leaf client-svc-name {
      type string;
      description
        "Identifier of the p2p transport network client signals.";
    }

    leaf client-svc-title {
      type string;
      description
        "Name of the p2p transport network client signals.";
    }
    
    leaf user-label {
      type string;
      description
        "Alias of the p2p transport network client signals.";
    }

    leaf client-svc-descr {
      type string;
      description
        "Description of the transport network client signals.";
    }

    leaf client-svc-customer {
      type string;
      description
        "Customer of the transport network client signals.";
    }

    container resilience {
      description "Place holder for resilience functionalities";
    }

    uses te-types:te-topology-identifier;

    leaf admin-status {
      type identityref {
        base te-types:tunnel-admin-state-type;
      }
      default te-types:tunnel-admin-state-up;
      description "Client signals administrative state.";
    }

    container src-access-ports {
      description
        "Source access port of a client signal.";
      uses client-svc-access-parameters;
    }
    container dst-access-ports {
      description
        "Destination access port of a client signal.";
      uses client-svc-access-parameters;
    }
    
    container pm-state {
      config false;
      description "PM data of E2E client signal";
      uses pm-state-grouping;
    }
    
    container error-info {
      config false;
      description "error messages of configuration";
      uses error-info-grouping;
    }
    
    container alarm-shreshold {
      description "threshold configuration for the E2E client signal";
      uses alarm-shreshold-grouping;
    }

    leaf direction {
      type identityref {
        base clntsvc-types:direction;
      }
      description "Uni-dir or Bi-dir for the client signal.";
    }

    list svc-tunnels {
      key tunnel-name;
      description
        "List of the TE Tunnels supporting the client signal.";
      uses client-svc-tunnel-parameters;
    }
  }

  grouping  client-svc-instance-state {
    description
      "State parameters for client services.";
    leaf operational-state {
      type identityref {
            base te-types:tunnel-state-type;
      }
      config false;
      description "Client signal operational state.";
    }
    leaf provisioning-state {
      type identityref {
            base te-types:lsp-state-type;
      }
      config false;
      description "Client signal provisioning state.";
    }
    leaf creation-time {
      type yang:date-and-time;
      config false;
      description "The time of the client signal be created.";
    }
    leaf last-updated-time {
      type yang:date-and-time;
      config false;
      description "The time of the client signal's latest update.";
    }
    leaf created-by {
      type string;
      config false;
      description
        "The client signal is created by whom,
         can be a system or staff ID.";
    }
    leaf last-updated-by {
      type string;
      config false;
      description
        "The client signal is last updated by whom,
         can be a system or staff ID.";
    }
    leaf owned-by {
      type string;
      config false;
      description
        "The client signal is owned by whom,
         can be a system ID.";
    }
  }

  /*
   * Data nodes
   */

  container client-svc {
    description
      "Transport client services.";

    list client-svc-instances {
      key client-svc-name;
      description
        "The list of p2p transport client service instances";

          uses client-svc-instance-config;
          uses client-svc-instance-state;
    }
  }
} 
<CODE ENDS>
]]> 
    </artwork>
     </figure>  
  </section>
   <!--  Other client signal YANG Code END  -->
   
    <section anchor="OtherTypes" title="Other Client Signal Types YANG Code" toc="default">
   <t>
   This module defines the types for other client signal types.
  </t>
 <figure anchor="OtherClientYANGType" title="" suppress-title="true" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
 <![CDATA[ 
<CODE BEGINS> file "ietf-trans-client-svc-types@2023-10-23.yang"
module ietf-trans-client-svc-types {
  namespace "urn:ietf:params:xml:ns:yang:ietf-trans-client-svc-types";
  prefix "clntsvc-types";
  
  organization
     "Internet Engineering Task Force (IETF) CCAMP WG";
   contact
     "
       ID-draft editor:
         Haomian Zheng (zhenghaomian@huawei.com);
         Aihua Guo (aihuaguo.ietf@gmail.com);
         Italo Busi (italo.busi@huawei.com);
         Anton Snitser (antons@sedonasys.com);
         Francesco Lazzeri (francesco.lazzeri@ericsson.com);
         Yunbin Xu (xuyunbin@caict.ac.cn);
         Yang Zhao (zhaoyangyjy@chinamobile.com);
         Xufeng Liu (Xufeng_Liu@jabil.com);
         Giuseppe Fioccola (giuseppe.fioccola@huawei.com);
         Chaode Yu (yuchaode@huawei.com);
     ";

   description
     "This module defines a YANG data model for describing
      transport network client types. The model fully conforms 
      to the Network Management Datastore Architecture (NMDA).

      Copyright (c) 2019 IETF Trust and the persons
      identified as authors of the code.  All rights reserved.

      Redistribution and use in source and binary forms, with or
      without modification, is permitted pursuant to, and subject
      to the license terms contained in, the Simplified BSD License
      set forth in Section 4.c of the IETF Trust's Legal Provisions
      Relating to IETF Documents
      (https://trustee.ietf.org/license-info).
      This version of this YANG module is part of RFC XXXX; see
      the RFC itself for full legal notices.";

   revision 2023-10-23 {
     description
       "version -01 as a WG document";
     reference
       "draft-ietf-ccamp-client-signal-yang";
   }

  identity direction {
    description
      "Direction information of Client Signal.";
  }

  identity bidirectional {
    base direction;
    description
      "Client Signal is bi-directional.";
  }

  identity unidirectional {
    base direction;
    description
      "Client Signal is uni-directional.";
  }

}
<CODE ENDS>
]]> 
    </artwork>
     </figure>  
  </section>
   <!--  Other client signal YANG Code END  -->
 </section>
 <!--  YANG Code Chapter END  -->

 <section anchor="Implementation" title="Implementation Status" toc="default">
  <t>
   [Note to the RFC Editor - remove this section before publication, as
   well as remove the reference to RFC <xref target="RFC7942" />.]
  </t>
  <t>
   This section records the status of known implementations of the
   protocol defined by this specification at the time of posting of this
   Internet-Draft, and is based on a proposal described in <xref target="RFC7942" />.
   The description of implementations in this section is intended to
   assist the IETF in its decision processes in progressing drafts to
   RFCs.  Please note that the listing of any individual implementation
   here does not imply endorsement by the IETF.  Furthermore, no effort
   has been spent to verify the information presented here that was
   supplied by IETF contributors.  This is not intended as, and must not
   be construed to be, a catalog of available implementations or their
   features.  Readers are advised to note that other implementations may
   exist.
  </t>
  <t>
   According to <xref target="RFC7942" />, "this will allow reviewers and working groups
   to assign due consideration to documents that have the benefit of
   running code, which may serve as evidence of valuable experimentation
   and feedback that have made the implemented protocols more mature.
   It is up to the individual working groups to use this information as
   they see fit".
  </t> 
  
   <section anchor="ONAP" title="Usage of the ETH Service YANG Model on ONAP" toc="default">
  <t>
   The implementation of the CCVPN (Cross Domain and Cross Layer VPN) use-case on ONAP follows the ACTN [RFC8453] architecture. In the design of CCVPN, ONAP presumes the responsibility of the MDSC, and third party network domain controllers the PNCs. Consequently, the ETH Service YANG model is used as the MPI between ONAP and the domain controllers.

  <list style="symbols">
   <t>
   Organization: China Mobile, Huawei Technologies, etc.
   </t>
   <t>
   Implementation: ONAP CCVPN uses the ETH Service YANG model as the ACTN MPI
   </t>
   <t>
   Description: ONAP CCVPN realizes the E-LINE and E-TREE service on a multi-domain network. Both of the services are modeled on ONAP by the ETH Service YANG model, and the model instances (e.g., JSON objects) are sent between ONAP and the domain controllers.  Refer to the following CCVPN wiki for more information: https://wiki.onap.org/display/DW/CCVPN%28Cross+Domain+and+Cross+Layer+VPN%29+USE+CASE
   </t>
   <t>
   Maturity Level: Prototype
   </t>
   <t>
   Coverage: Partial
   </t>
   <t>
   Contact: henry.yu1@huawei.com
   </t>
  </list>
  </t>
  
 </section>
 </section>
 <!--  Issue END  -->

 <section anchor="IANA" title="IANA Considerations" toc="default">
  <t>
  It is proposed that IANA should assign new URIs from the "IETF XML Registry" <xref target="RFC3688" /> as follows:
  </t>
  <figure>
      <artwork>
      <![CDATA[
      URI: urn:ietf:params:xml:ns:yang:ietf-eth-tran-service
      Registrant Contact: The IESG
      XML: N/A; the requested URI is an XML namespace.
      
      URI: urn:ietf:params:xml:ns:yang:ietf-trans-client-service
      Registrant Contact: The IESG
      XML: N/A; the requested URI is an XML namespace.

      URI: urn:ietf:params:xml:ns:yang:ietf-eth-tran-types  
      Registrant Contact: The IESG  
      XML: N/A; the requested URI is an XML namespace.
      
      URI: urn:ietf:params:xml:ns:yang:ietf-trans-client-svc-types  
      Registrant Contact: The IESG  
      XML: N/A; the requested URI is an XML namespace.
        ]]>
      </artwork>
    </figure>
  <t> 
   This document registers following YANG modules in the YANG Module Names registry <xref target="RFC6020" />.
    </t>
    <figure>
        <artwork>
      <![CDATA[
   name:         ietf-eth-tran-service
   namespace:    urn:ietf:params:xml:ns:yang:ietf-eth-tran-service
   prefix:       ethtsvc
   reference:    RFC XXXX: A YANG Data Model for Transport 
                           Network Client Signals
   
   name:         ietf-eth-tran-types
   namespace:    urn:ietf:params:xml:ns:yang:ietf-eth-tran-types
   prefix:       etht-types
   reference:    RFC XXXX: A YANG Data Model for Transport 
                           Network Client Signals

   name:         ietf-trans-client-service
   namespace:    urn:ietf:params:xml:ns:yang:ietf-trans-client-service
   prefix:       clntsvc
   reference:    RFC XXXX: A YANG Data Model for Transport 
                           Network Client Signals
                           
   name:         ietf-trans-client-svc-types
   namespace:    urn:ietf:params:xml:ns:yang:ietf-trans-client-svc-types
   prefix:       clntsvc-types
   reference:    RFC XXXX: A YANG Data Model for Transport 
                           Network Client Signals
        ]]>
        </artwork>
    </figure>
 </section>
 <!--  IANA END  -->

 <section title="Manageability Considerations" toc="default">
  <t>
  TBD.
  </t>
 </section>
 <!--  Manageability END  -->

 <section anchor="Security" title="Security Considerations" toc="default">
  <t>
  The data following the model defined in this document is exchanged via, for example, the interface between an orchestrator and a network domain controller. 
  </t>
  <t>
  The YANG module defined in this document can be accessed via the RESTCONF protocol defined in <xref target="RFC8040" />, or maybe via the NETCONF protocol <xref target="RFC6241" />.  
  </t>
  <t>
  There are a number of data nodes defined in the YANG module which are writable/creatable/deletable (i.e., config true, which is the default).  These data nodes may be considered sensitive or vulnerable in some network environments.  Write operations (e.g., POST) to these data nodes without proper protection can have a negative effect on network operations.
  </t>
 </section>
 <!--  Security END  -->

 <section anchor="Acknowledgements" title="Acknowledgements" toc="default">
  <t>
  We would like to thank Igor Bryskin and Daniel King for their comments and discussions.
  </t> 
 </section>
 <!--  Acknowledgements END  -->

 <section anchor="Contributor" title="Contributors" toc="default">
  
  <t>
  Yanlei Zheng
  <vspace blankLines="0" /> 
  China Unicom
  <vspace blankLines="0" /> 
  Email: zhengyl@dimpt.com
  <!-- zhengyanlei@chinaunicom.cn -->
  <vspace blankLines="0" /> 
  </t>
  
    <t>
  Zhe Liu
  <vspace blankLines="0" /> 
  Huawei Technologies, 
  <vspace blankLines="0" /> 
  Email: liuzhe123@huawei.com
  <vspace blankLines="0" /> 
  </t>
  
    <t>
  Sergio Belotti
  <vspace blankLines="0" /> 
  Nokia, 
  <vspace blankLines="0" /> 
  Email: sergio.belotti@nokia.com
  <vspace blankLines="0" /> 
  </t>
  
    <t>
  Yingxi Yao
  <vspace blankLines="0" /> 
  Shanghai Bell, 
  <vspace blankLines="0" /> 
  yingxi.yao@nokia-sbell.com
  <vspace blankLines="0" /> 
  </t>
  
      <t>
  Henry Yu
  <vspace blankLines="0" /> 
  Huawei Technologies, 
  <vspace blankLines="0" /> 
  henry.yu1@huawei.com
  <vspace blankLines="0" /> 
  </t>
 </section>
 <!--  Contributor END  --> 
 </middle>


 <back>
 <references title="Normative References">
  <!--<?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?> --> 
  <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.6020.xml"?>
  <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.6241.xml"?>
  <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.6991.xml"?>   
  <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.7139.xml"?> 
  <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.7950.xml"?>
  <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8040.xml"?>
  <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8294.xml"?> 
  <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8776.xml"?> 
  <?rfc include="reference.I-D.ietf-ccamp-otn-topo-yang"?>
  <?rfc include="reference.I-D.ietf-ccamp-otn-tunnel-model"?>
  <?rfc include="reference.I-D.ietf-ccamp-l1csm-yang"?>
  <?rfc include="reference.I-D.ietf-ccamp-layer1-types"?>
  <reference anchor="ITU-T_G.875" >
    <front>
      <title>Optical transport network: Protocol-neutral management information model for the network element view</title>
      <author >
        <organization>International Telecommunication Union</organization>
      </author>
      <date year="2020" month="June"/>
    </front>
    <seriesInfo name="ITU-T Recommendation G.875" value=""/>
  </reference>
 </references>
 <!--  Normative END  -->

 <references title="Informative References">
  <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2697.xml"?>
  <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2698.xml"?>
  <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.3688.xml"?>
  <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.4115.xml"?>
  <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.7942.xml"?>
  <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8299.xml"?>
  <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8309.xml"?>
  <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8340.xml"?>
  <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8342.xml"?>
  <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8453.xml"?>
  <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8466.xml"?>
   <reference anchor="IEEE802.1ad">
        <front>
        <title>
        IEEE 802.1ad - Provider Bridges. 
        </title>
        <author initials="802.1ad" surname="IEEE" fullname="IEEE 802.1ad"/>
        <date month="May" year="2006"/>
        </front>
        <seriesInfo name="IEEE 802.1ad" value=""/>
    </reference>
    <reference anchor="IEEE802.1q">
        <front>
        <title>
        IEEE 802.1q - Virtual Bridged Local Area Networks
        </title>
        <author initials="802.1q" surname="IEEE" fullname="IEEE 802.1q"/>
        <date month="June" year="2005"/>
        </front>
        <seriesInfo name="IEEE 802.1q" value=""/>
    </reference>
    <reference anchor="MEF10">
        <front>
        <title>
          Ethernet Services Attributes Phase 1
        </title>
        <author initials="10" surname="MEF" fullname="MEF10"/>
        <date month="November" year="2004"/>
        </front>
        <seriesInfo name="MEF10" value=""/>
    </reference>
  </references>
 <!--  Informative END  -->
 </back>
</rfc>
